// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP _dhlvm_rcpp_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// ldmultinom_cpp
long double ldmultinom_cpp(NumericVector x, NumericVector prob);
RcppExport SEXP _dhlvm_ldmultinom_cpp(SEXP xSEXP, SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(ldmultinom_cpp(x, prob));
    return rcpp_result_gen;
END_RCPP
}
// testArray3D
NumericVector testArray3D();
RcppExport SEXP _dhlvm_testArray3D() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(testArray3D());
    return rcpp_result_gen;
END_RCPP
}
// rdirichlet_cpp
NumericVector rdirichlet_cpp(NumericVector alpha_m);
RcppExport SEXP _dhlvm_rdirichlet_cpp(SEXP alpha_mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type alpha_m(alpha_mSEXP);
    rcpp_result_gen = Rcpp::wrap(rdirichlet_cpp(alpha_m));
    return rcpp_result_gen;
END_RCPP
}
// sampleState_cpp
NumericMatrix sampleState_cpp(NumericMatrix data, NumericMatrix P, NumericVector S_prev, NumericMatrix beta);
RcppExport SEXP _dhlvm_sampleState_cpp(SEXP dataSEXP, SEXP PSEXP, SEXP S_prevSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type P(PSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type S_prev(S_prevSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleState_cpp(data, P, S_prev, beta));
    return rcpp_result_gen;
END_RCPP
}
// sampleTransition_cpp
NumericMatrix sampleTransition_cpp(NumericVector S, NumericMatrix alpha);
RcppExport SEXP _dhlvm_sampleTransition_cpp(SEXP SSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type S(SSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleTransition_cpp(S, alpha));
    return rcpp_result_gen;
END_RCPP
}
// sampleBeta_cpp
NumericMatrix sampleBeta_cpp(NumericMatrix data, NumericVector S, NumericMatrix eta);
RcppExport SEXP _dhlvm_sampleBeta_cpp(SEXP dataSEXP, SEXP SSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type S(SSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleBeta_cpp(data, S, eta));
    return rcpp_result_gen;
END_RCPP
}
// discreteMS_cpp
List discreteMS_cpp(NumericMatrix data, NumericMatrix eta, NumericMatrix alpha, int K, int steps, int burn, int thin);
RcppExport SEXP _dhlvm_discreteMS_cpp(SEXP dataSEXP, SEXP etaSEXP, SEXP alphaSEXP, SEXP KSEXP, SEXP stepsSEXP, SEXP burnSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type steps(stepsSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(discreteMS_cpp(data, eta, alpha, K, steps, burn, thin));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_dhlvm_rcpp_hello_world", (DL_FUNC) &_dhlvm_rcpp_hello_world, 0},
    {"_dhlvm_ldmultinom_cpp", (DL_FUNC) &_dhlvm_ldmultinom_cpp, 2},
    {"_dhlvm_testArray3D", (DL_FUNC) &_dhlvm_testArray3D, 0},
    {"_dhlvm_rdirichlet_cpp", (DL_FUNC) &_dhlvm_rdirichlet_cpp, 1},
    {"_dhlvm_sampleState_cpp", (DL_FUNC) &_dhlvm_sampleState_cpp, 4},
    {"_dhlvm_sampleTransition_cpp", (DL_FUNC) &_dhlvm_sampleTransition_cpp, 2},
    {"_dhlvm_sampleBeta_cpp", (DL_FUNC) &_dhlvm_sampleBeta_cpp, 3},
    {"_dhlvm_discreteMS_cpp", (DL_FUNC) &_dhlvm_discreteMS_cpp, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_dhlvm(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
